- name: Ensure Virtual Machine Configurations
  hosts: all

  roles:
    - { role: fubarhouse.golang, become: yes }

  tasks:
    - name: Update and upgrade apt packages
      become: yes
      apt:
        upgrade: yes
        update_cache: yes
        cache_valid_time: 3600

    - name: Install required packages for apt over HTTPS
      become: yes
      apt:
        name:
          - apt-transport-https
          - apache2-utils
          - ca-certificates
          - curl
          - gnupg-agent
          - build-essential
          - openssh-server
          - fail2ban
          - python3
          - zsh
          - git
          - software-properties-common
          - python3
          - python3-pip
        state: present

    - name: Install python packages
      pip:
        name: jsondiff

    - name: Install the gpg key for nodejs LTS
      become: yes
      apt_key:
        url: "https://deb.nodesource.com/gpgkey/nodesource.gpg.key"
        state: present

    - name: Install the nodejs LTS repos
      become: yes
      apt_repository:
        repo: "deb https://deb.nodesource.com/node_18.x {{ ansible_distribution_release }} main"
        state: present
        update_cache: yes

    - name: Install the nodejs
      become: yes
      apt:
        name: nodejs
        state: present

    - name: Install pnpm globally
      become: yes
      npm:
        name: pnpm
        global: true
        state: present

    - name: Install yarn
      become: yes
      npm:
        name: yarn
        global: true
        state: present

    - name: Add Docker's official GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Set up the Docker stable repository
      become: yes
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable"
        state: present

    - name: Install Docker CE
      become: yes
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present
        update_cache: yes

    - name: Ensure docker group is present
      group:
        name: docker
        state: present

    - name: Add current user to docker group
      user:
        name: "sarthakjdev"
        groups: docker
        append: yes

    - name: Install Docker-compose
      become: yes
      apt:
        name: docker-compose
        state: present

    - name: Setup docker services on boot
      become: yes
      systemd:
        name: docker
        enabled: yes
        state: restarted
        daemon_reload: yes

    - name: Dockerhub authorization
      docker_login:
        username: sarthakjdev
        password: "{{ DOCKER_PASSWORD }}"

    - name: Setup docker daemon to use fluentd docker driver
      become: yes
      copy:
        content: "{{ lookup('file', '../../docker-daemon.json')  }}"
        dest: /etc/docker/daemon.json

    - name: Check if Docker Swarm is initialized
      command: docker info --format "{{'{{'}}.Swarm.LocalNodeState{{'}}'}}"
      register: docker_swarm_status
      changed_when: false
      failed_when: docker_swarm_status.rc not in [0, 1]

    - name: Initialize Docker Swarm
      command: docker swarm init
      when: docker_swarm_status.stdout != 'active'

    - name: Cloning git repo
      git:
        repo: git@github.com:sarthakjdev/home-server-configs.git
        dest: ~/home-server-configs
        update: true
        clone: true
        single_branch: yes
        version: master
        force: yes

    - name: Sync SSL Certificate
      copy:
        dest: ~/home-server-configs/src/nginx/ssl/cloudflare-origin-cert.pem
        content: "{{ lookup('env', 'CF_SSL_CERT')  }}"

    - name: Sync SSL Certificate
      copy:
        dest: ~/home-server-configs/src/nginx/ssl/cloudflare-origin-cert-key.pem
        content: "{{ lookup('env', 'CF_SSL_CERT_KEY')  }}"

    - name: Ensure cloudflared directory
      become: true
      file:
        path: "/home/sarthakjdev/.cloudflared"
        state: directory
        mode: "0755"
        owner: "65532"
        group: "65532"

    - name: Ensure cloudtunnel cert.pem file
      copy:
        content: "{{ lookup('env', 'CF_TUNNEL_CERT')  }}"
        dest: "~/.cloudflared/cert.pem"
    - name: Ensure cloudtunnel home-server-tunnel.json file (credential file)
      copy:
        content: "{{ lookup('env', 'CF_TUNNEL_TOKEN')  }}"
        dest: "~/.cloudflared/home-server-tunnel.json"
    - name: Upload the docker-compose file
      copy:
        src: "../docker/docker-compose.yaml"
        dest: "~/backend/"

    - name: Create secret NEXTCLOUD_ADMIN_PASSWORD
      docker_secret:
        name: NEXTCLOUD_ADMIN_PASSWORD
        data: "{{ lookup('env', 'NEXTCLOUD_ADMIN_PASSWORD')  }}"
        state: present

    - name: Create secret CF_TUNNEL_TOKEN
      docker_secret:
        name: NEXTCLOUD_ADMIN_PASSWORD
        data: "{{ lookup('env', 'CF_TUNNEL_TOKEN')  }}"
        state: present

    - name: Create secret NEXTCLOUD_ADMIN_USER
      docker_secret:
        name: NEXTCLOUD_ADMIN_USER
        data: "{{ lookup('env', 'NEXTCLOUD_ADMIN_USER')  }}"
        state: present

    - name: Create secret NEXTCLOUD_PG_PASSWORD
      docker_secret:
        name: NEXTCLOUD_PG_PASSWORD
        data: "{{ lookup('env', 'NEXTCLOUD_PG_PASSWORD')  }}"
        state: present

    - name: Create secret NEXTCLOUD_PG_USER
      docker_secret:
        name: NEXTCLOUD_PG_USER
        data: "{{ lookup('env', 'NEXTCLOUD_PG_USER')  }}"
        state: present

    - name: Create secret NEXTCLOUD_PG_DB
      docker_secret:
        name: NEXTCLOUD_PG_DB
        data: "{{ lookup('env', 'NEXTCLOUD_PG_DB')  }}"
        state: present

    - name: Create a network with driver options
      docker_network:
        name: home_server_internal_network
        driver: overlay

    - name: Deploy DNS
      docker_stack:
        state: present
        name: home_server_dns_stack
        compose:
          - ~/home-server-configs/src/dns/dns-docker-compose.yaml

    - name: Deploy file server stack
      docker_stack:
        state: present
        name: home_file_server_stack
        compose:
          - ~/home-server-configs/src/file-server/file-server-docker-compose.yaml

    - name: Deploy media server stack
      docker_stack:
        state: present
        name: home_media_server_stack
        compose:
          - ~/home-server-configs/src/monitoring/monitoring-docker-compose.yaml

    - name: Deploy logging stack
      docker_stack:
        state: present
        name: home_logging_stack
        compose:
          - ~/home-server-configs/src/logging/logging-docker-compose.yaml

    - name: Deploy Nginx Reverse Proxy
      docker_stack:
        state: present
        name: home_web_server_stack
        compose:
          - ~/home-server-configs/src/nginx/web-server-docker-compose.yaml

    - name: Deploy Cloudflare tunnel stack
      docker_stack:
        state: present
        name: home_server_cf_stack
        compose:
          - ~/home-server-configs/src/cloudflare/cf-docker-compose.yaml

    # - name: Deploy monitoring stack
    #   docker_stack:
    #     state: present
    #     name: home_monitoring_stack
    #     compose:
    #       - ~/home-server-configs/src/monitoring/monitoring-docker-compose.yaml
